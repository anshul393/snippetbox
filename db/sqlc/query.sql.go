// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package db

import (
	"context"
	"time"
)

const getLatestSnippets = `-- name: GetLatestSnippets :many
SELECT id, title, content, created, expires FROM
snippets
WHERE expires > now()
ORDER BY id DESC LIMIT 10
`

func (q *Queries) GetLatestSnippets(ctx context.Context) ([]*Snippet, error) {
	rows, err := q.db.QueryContext(ctx, getLatestSnippets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Snippet
	for rows.Next() {
		var i Snippet
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Created,
			&i.Expires,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnippet = `-- name: GetSnippet :one
SELECT id, title, content, created, expires FROM 
snippets
WHERE expires > now() and id=$1
`

func (q *Queries) GetSnippet(ctx context.Context, id int32) (*Snippet, error) {
	row := q.db.QueryRowContext(ctx, getSnippet, id)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Created,
		&i.Expires,
	)
	return &i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, hashed_password, created FROM 
users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Created,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, hashed_password, created FROM
users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Created,
	)
	return &i, err
}

const insertSnippet = `-- name: InsertSnippet :one
INSERT INTO 
snippets(title,content,created,expires)
VALUES($1,$2,now(),now() + $3 *INTERVAL '1 day') 
RETURNING id
`

type InsertSnippetParams struct {
	Title   string
	Content string
	Column3 interface{}
}

func (q *Queries) InsertSnippet(ctx context.Context, arg InsertSnippetParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertSnippet, arg.Title, arg.Content, arg.Column3)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO
users(name,email,hashed_password,created)
VALUES($1,$2,$3,$4)
`

type InsertUserParams struct {
	Name           string
	Email          string
	HashedPassword string
	Created        time.Time
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.Name,
		arg.Email,
		arg.HashedPassword,
		arg.Created,
	)
	return err
}
